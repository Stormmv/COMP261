#BlueJ class context
comment0.target=AStar
comment0.text=\r\n\ When\ the\ user\ enters\ a\ start\ and\ goal\ (by\ typing\ the\ names\ of\ the\ Stops\ in\r\n\ the\ text\ fields\ or\ by\ clicking\ on\ the\ displayed\ network),\ the\ NetworkViewer\r\n\ class\ will\ call\ AStar.findShortestPath(...)\ to\ find\ the\ shortest\ route\ from\r\n\ the\ start\ to\ the\ goal.\ AStar.findShortestPath(...)\ should\ return\ the\ shortest\r\n\ path\ from\ start\ to\ goal\ as\ an\ ordered\ list\ of\ Edges\ on\ the\ path,\ from\ the\r\n\ start\ to\ the\ goal.\ If\ there\ is\ no\ path,\ it\ should\ return\ null.\r\n\ The\ AStar.java\ file\ is\ provided,\ but\ is\ essentially\ empty.\ You\ need\ to\r\n\ complete\ it,\ implementing\ the\ A*\ algorithm\ described\ in\ lectures..\ You\ will\r\n\ also\ need\ to\ define\ a\ class\ for\ the\ items\ that\ are\ put\ on\ the\ priority\ queue\r\n\ in\ A*.\r\n\ A*\ uses\ a\ heuristic\ estimate\ of\ the\ remaining\ path\ length\ from\ each\ node\ it\r\n\ considers;\ you\ may\ find\ the\ distanceTo(...)\ methods\ in\ Stop.java\ helpful.\r\n\ Notes\:\r\n\ The\ Stop\ class\ does\ not\ allow\ you\ to\ mark\ Stops\ with\ "visited"\ or\ with\ the\r\n\ previous\ node\ from\ which\ they\ were\ visited.\ You\ will\ need\ to\ use\ a\ HashSet\ of\r\n\ visited\ Stops\ to\ record\ which\ Stops\ have\ been\ visited,\ and\ an\ appropriate\r\n\ structure\ to\ record\ the\ Edge\ from\ which\ the\ search\ got\ to\ each\ node\ that\ it\r\n\ visited.\r\n\ The\ shortest\ path\ finding\ in\ Part\ 1\ does\ not\ have\ to\ take\ the\ bus\ route/train\r\n\ line\ information\ into\ account,\ so\ that\ the\ path\ it\ finds\ may\ have\ a\ sequence\r\n\ of\ edges\ from\ completely\ different\ bus\ routes.\ Actually\ taking\ the\ proposed\r\n\ paths\ might\ require\ changing\ buses\ (and\ waiting\ for\ a\ later\ bus)\ at\ every\r\n\ Stop\!\ You\ will\ see\ this\ in\ the\ report\ of\ the\ path\ shown\ at\ the\ bottom\ of\ the\r\n\ interface.\ Part\ 4\ of\ the\ assignment\ will\ address\ this\ problem.\r\n
comment1.params=start\ goal
comment1.target=java.util.List\ findShortestPath(Stop,\ Stop)
comment2.params=cameFrom\ current
comment2.target=java.util.List\ reconstructPath(java.util.Map,\ Stop)
numComments=3
